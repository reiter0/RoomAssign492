
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;

import javax.swing.AbstractListModel;
import javax.swing.BorderFactory;
import javax.swing.ComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ListCellRenderer;

import com.sun.xml.internal.ws.api.server.Container;


public class ThisIsCombineofReadAndDrop extends JPanel
{ 	
	 public ThisIsCombineofReadAndDrop() throws IOException 
	 {
	        super(new BorderLayout());

	        //Load class list into an ArrayList
	        ArrayList<String> roomS = new ArrayList<String>();

			// Create a BufferedReader from a FileReader.
			BufferedReader reader = new BufferedReader(new FileReader("roomList.txt"));

			// Loop over lines in the file and print them.
			while (true) 
			{
				String line = reader.readLine();
				if(line != null)
				{	
					roomS.add(line);
				}	
				else 
				{
					break;
				}
			}
			Collections.sort(roomS);
//			for(int i = 0;i<roomS.size();i++)
//			{
//				System.out.println(roomS.get(i));
//			}
//			System.out.println(roomS.size());
			String [] combo = roomS.toArray(new String[roomS.size()]);
			System.out.println("Sorted Room List");
			for(int i = 0;i<combo.length;i++)
			{
				System.out.println(combo[i]);
			}
			
			// Close the BufferedReader.
			reader.close();
	      

	        //Create the combo box.
	        JComboBox petList = new JComboBox(combo);
	        ComboBoxRenderer renderer= new ComboBoxRenderer();
	        renderer.setPreferredSize(new Dimension(200, 130));
	        petList.setRenderer(renderer);
	        petList.setMaximumRowCount(3);

	        //Lay out the demo.
	        add(petList, BorderLayout.PAGE_START);
	        setBorder(BorderFactory.createEmptyBorder(20,20,20,20));
	        comboGui(combo);
	    }
	 private static void createAndShowGUI() throws IOException 
	 {
	        //Create and set up the window.
	        JFrame frame = new JFrame("CustomComboBoxDemo");
	        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

	        //Create and set up the content pane.
	        JComponent newContentPane = new ThisIsCombineofReadAndDrop();
	        newContentPane.setOpaque(true); //content panes must be opaque
	        frame.setContentPane(newContentPane);

	        //Display the window.
	        frame.pack();
	        frame.setVisible(true);
	    }

	public static void main(String[]args) throws IOException
	{	
		//Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() 
        {
            public void run() 
            {
            	try 
            	{
					createAndShowGUI();
				} catch (IOException e) 
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
		/* JFrame frame = new JFrame("ArrayListComboBoxModel");
		    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		    Collection col = System.getProperties().values();
		    ArrayList arrayList = new ArrayList(col);
		    ArrayListComboBoxModel model = new ArrayListComboBoxModel(roomS);

		    JComboBox comboBox = new JComboBox(model);

		    Container contentPane = frame.getContentPane();
		    contentPane.add(comboBox, BorderLayout.NORTH);
		    frame.setSize(300, 225);
		    frame.setVisible(true);
		    */
	}
	public static void comboGui(String[] combo)
	{	
		
//		JComboBox roomList = new JComboBox(combo);
//		roomList.setEditable(true);
//		roomList.addActionListener(roomList);
	}
} 
/************ComboBoxRenderer Class*********************************/
class ComboBoxRenderer extends JLabel implements ListCellRenderer 
{
	private Font uhOhFont;
	public ComboBoxRenderer() 
	{
        setOpaque(true);
        setHorizontalAlignment(CENTER);
        setVerticalAlignment(CENTER);
    }
	 /*
     * This method finds the image and text corresponding
     * to the selected value and returns the label, set up
     * to display the text and image.
     */
    public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus) 
    {
        //Get the selected index. (The index param isn't
        //always valid, so just use the value.)
        int selectedIndex = ((Integer)value).intValue();

        if (isSelected) 
        {
            setBackground(list.getSelectionBackground());
            setForeground(list.getSelectionForeground());
        } else {
            setBackground(list.getBackground());
            setForeground(list.getForeground());
        }
        //Set the icon and text.  If icon was null, say so.
        

        return this;
    }

    //Set the font and text when no image was found.
  //Set the font and text when no image was found.
    protected void setUhOhText(String uhOhText, Font normalFont) 
    {
        if (uhOhFont == null) 
        { //lazily create this font
            uhOhFont = normalFont.deriveFont(Font.ITALIC);
        }
        setFont(uhOhFont);
        setText(uhOhText);
    }	
	
}
